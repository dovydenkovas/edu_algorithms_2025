#include "operator.h"


// Регистрация нового клиента.
void Operator::add_client(Client client) {

}

// Снятие с обслуживания клиента.
void Operator::remove_client(Client client) {
  // При удалении сведений о SIM-карте должны быть учтены и обработаны ситуации, когда эта SIM-карта уже выдана клиенту. Аналогичным образом следует поступать и с удалением данных о клиентах.
}

// Просмотр всех зарегистрированных клиентов.
void Operator::show_all_clients() {
//  Состав данных о клиенте или SIM-карте, выдаваемых при просмотре всех зарегистрированных клиентов или просмотре всех SIM-карт, определяется студентом самостоятельно, но должен содержать не менее двух полей.
}

// Очистку данных о клиентах;
void Operator::remove_all_clients() {

}

// Поиск клиента по «номер паспорта».
// Результаты поиска – все сведения о найденном клиенте и номера SIM-карт,
// которые ему выданы.
void Operator::find_client(string passport_number) {

}

// Поиск клиента по фрагментам ФИО или адреса.
// Результаты поиска – список найденных клиентов с указанием номера паспорта,
// ФИО и адреса
void Operator::find_clients(wstring pattern) {
// Поиск клиента по фрагментам ФИО или адреса должен осуществляться путем систематического обхода АВЛ-дерева поиска. Метод обхода определяется вариантом задания. При поиске клиента по фрагментам ФИО или адреса могут быть заданы как полное ФИО или адрес, так и их части (например, только фамилия клиента без имени и отчества, только название улицы из адреса). Для обнаружения заданного фрагмента в полном ФИО или адресе должен применяться алгоритм поиска слова в тексте, указанный в варианте задания.
}

// Добавление новой SIM-карты
void Operator::add_sim(Sim sim) {

}

// Удаление сведений о SIM-карте
void Operator::remove_sim(Sim sim) {
// При удалении сведений о SIM-карте должны быть учтены и обработаны ситуации, когда эта SIM-карта уже выдана клиенту. Аналогичным образом следует поступать и с удалением данных о клиентах.
}

// Просмотр всех имеющихся SIM-карт;
void Operator::show_all_sim() {
//  Состав данных о клиенте или SIM-карте, выдаваемых при просмотре всех зарегистрированных клиентов или просмотре всех SIM-карт, определяется студентом самостоятельно, но должен содержать не менее двух полей.
}

// Очистку данных о SIM-картах;
void Operator::remove_all_sim() {

}

// Поиск SIM-карты по «номеру SIM-карты».
// Результаты поиска – все сведения о найденной SIM-карте, а также ФИО и номер
// паспорта клиента, которому выдана эта SIM-карта;
void Operator::find_sim(string sim_number) {

}

// Поиск SIM-карты по тарифу. Результаты поиска – список найденных SIM-карт с
// указанием «номера SIM-карты», тарифа, года выпуска;
void Operator::find_sims(wstring pattern) {
  // Метод поиска SIM-карты по тарифу определяется студентом самостоятельно. Выбранный метод необходимо сравнить с альтернативными методами.
}

// Регистрацию выдачи клиенту SIM-карты;
void Operator::registration_sim(string passport_number, string sim_number) {
  // Регистрация выдачи SIM-карты клиенту должна осуществляться только при наличии SIM-карты у оператора сотовой связи (значение поля «Признак наличия» для соответствующей SIM-карты имеет значение «Истина»).
  // При регистрации выдачи SIM-карты клиенту или возврата SIM-карты клиентом должно корректироваться значение поля «Признак наличия» для соответствующей SIM-карты.
  //
  // 2. Одному клиенту может быть выдано несколько SIM-карт. Таким образом, могут
  // быть данные, имеющие повторяющиеся значения в своих полях.

}

// регистрацию возврата SIM-карты от клиента.
void Operator::remove_registration_sim(string passport_number, string sim_number) {
  // При регистрации выдачи SIM-карты клиенту или возврата SIM-карты клиентом должно корректироваться значение поля «Признак наличия» для соответствующей SIM-карты.

}
